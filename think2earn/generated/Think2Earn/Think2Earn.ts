// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BountyCompleted extends ethereum.Event {
  get params(): BountyCompleted__Params {
    return new BountyCompleted__Params(this);
  }
}

export class BountyCompleted__Params {
  _event: BountyCompleted;

  constructor(event: BountyCompleted) {
    this._event = event;
  }

  get bountyId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get numAcceptedSubmissions(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BountyCreated extends ethereum.Event {
  get params(): BountyCreated__Params {
    return new BountyCreated__Params(this);
  }
}

export class BountyCreated__Params {
  _event: BountyCreated;

  constructor(event: BountyCreated) {
    this._event = event;
  }

  get bountyId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get mediaURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get reward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get judgeTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get maxProgress(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class EEGDataSubmitted extends ethereum.Event {
  get params(): EEGDataSubmitted__Params {
    return new EEGDataSubmitted__Params(this);
  }
}

export class EEGDataSubmitted__Params {
  _event: EEGDataSubmitted;

  constructor(event: EEGDataSubmitted) {
    this._event = event;
  }

  get bountyId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get submissionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get submitter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get eegDataHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class EtherDeposited extends ethereum.Event {
  get params(): EtherDeposited__Params {
    return new EtherDeposited__Params(this);
  }
}

export class EtherDeposited__Params {
  _event: EtherDeposited;

  constructor(event: EtherDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentMade extends ethereum.Event {
  get params(): PaymentMade__Params {
    return new PaymentMade__Params(this);
  }
}

export class PaymentMade__Params {
  _event: PaymentMade;

  constructor(event: PaymentMade) {
    this._event = event;
  }

  get bountyId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get submissionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Think2Earn__bountiesResult {
  value0: string;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: Address;
  value9: boolean;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: Address,
    value9: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getDescription(): string {
    return this.value1;
  }

  getMediaURI(): string {
    return this.value2;
  }

  getReward(): BigInt {
    return this.value3;
  }

  getDuration(): BigInt {
    return this.value4;
  }

  getJudgeTime(): BigInt {
    return this.value5;
  }

  getMaxProgress(): BigInt {
    return this.value6;
  }

  getCreationBlock(): BigInt {
    return this.value7;
  }

  getCreator(): Address {
    return this.value8;
  }

  getIsActive(): boolean {
    return this.value9;
  }
}

export class Think2Earn__getBountiesResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get mediaURI(): string {
    return this[2].toString();
  }

  get reward(): BigInt {
    return this[3].toBigInt();
  }

  get duration(): BigInt {
    return this[4].toBigInt();
  }

  get judgeTime(): BigInt {
    return this[5].toBigInt();
  }

  get maxProgress(): BigInt {
    return this[6].toBigInt();
  }

  get creationBlock(): BigInt {
    return this[7].toBigInt();
  }

  get creator(): Address {
    return this[8].toAddress();
  }

  get isActive(): boolean {
    return this[9].toBoolean();
  }

  get submissions(): Array<Think2Earn__getBountiesResultValue0SubmissionsStruct> {
    return this[10].toTupleArray<Think2Earn__getBountiesResultValue0SubmissionsStruct>();
  }
}

export class Think2Earn__getBountiesResultValue0SubmissionsStruct extends ethereum.Tuple {
  get submitter(): Address {
    return this[0].toAddress();
  }

  get eegDataHash(): Bytes {
    return this[1].toBytes();
  }
}

export class Think2Earn__getBountyDetailsResult {
  value0: string;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: Address;
  value8: BigInt;
  value9: boolean;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: Address,
    value8: BigInt,
    value9: boolean,
    value10: BigInt,
    value11: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getDescription(): string {
    return this.value1;
  }

  getMediaURI(): string {
    return this.value2;
  }

  getReward(): BigInt {
    return this.value3;
  }

  getDuration(): BigInt {
    return this.value4;
  }

  getJudgeTime(): BigInt {
    return this.value5;
  }

  getMaxProgress(): BigInt {
    return this.value6;
  }

  getCreator(): Address {
    return this.value7;
  }

  getCreationBlock(): BigInt {
    return this.value8;
  }

  getIsActive(): boolean {
    return this.value9;
  }

  getSubmissionsLength(): BigInt {
    return this.value10;
  }

  getCurrentProgress(): BigInt {
    return this.value11;
  }
}

export class Think2Earn__getBountySubmissionsResultValue0Struct extends ethereum.Tuple {
  get submitter(): Address {
    return this[0].toAddress();
  }

  get eegDataHash(): Bytes {
    return this[1].toBytes();
  }
}

export class Think2Earn extends ethereum.SmartContract {
  static bind(address: Address): Think2Earn {
    return new Think2Earn("Think2Earn", address);
  }

  activeBountyIds(param0: BigInt): BigInt {
    let result = super.call(
      "activeBountyIds",
      "activeBountyIds(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_activeBountyIds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeBountyIds",
      "activeBountyIds(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bounties(param0: BigInt): Think2Earn__bountiesResult {
    let result = super.call(
      "bounties",
      "bounties(uint256):(string,string,string,uint256,uint256,uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Think2Earn__bountiesResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toAddress(),
      result[9].toBoolean(),
    );
  }

  try_bounties(
    param0: BigInt,
  ): ethereum.CallResult<Think2Earn__bountiesResult> {
    let result = super.tryCall(
      "bounties",
      "bounties(uint256):(string,string,string,uint256,uint256,uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Think2Earn__bountiesResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toAddress(),
        value[9].toBoolean(),
      ),
    );
  }

  bountyCount(): BigInt {
    let result = super.call("bountyCount", "bountyCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bountyCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bountyCount", "bountyCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getActiveBounties(): Array<BigInt> {
    let result = super.call(
      "getActiveBounties",
      "getActiveBounties():(uint256[])",
      [],
    );

    return result[0].toBigIntArray();
  }

  try_getActiveBounties(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getActiveBounties",
      "getActiveBounties():(uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBounties(): Array<Think2Earn__getBountiesResultValue0Struct> {
    let result = super.call(
      "getBounties",
      "getBounties():((string,string,string,uint256,uint256,uint256,uint256,uint256,address,bool,(address,bytes)[])[])",
      [],
    );

    return result[0].toTupleArray<Think2Earn__getBountiesResultValue0Struct>();
  }

  try_getBounties(): ethereum.CallResult<
    Array<Think2Earn__getBountiesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getBounties",
      "getBounties():((string,string,string,uint256,uint256,uint256,uint256,uint256,address,bool,(address,bytes)[])[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Think2Earn__getBountiesResultValue0Struct>(),
    );
  }

  getBountyCount(): BigInt {
    let result = super.call("getBountyCount", "getBountyCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBountyCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBountyCount",
      "getBountyCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBountyDetails(_bountyId: BigInt): Think2Earn__getBountyDetailsResult {
    let result = super.call(
      "getBountyDetails",
      "getBountyDetails(uint256):(string,string,string,uint256,uint256,uint256,uint256,address,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_bountyId)],
    );

    return new Think2Earn__getBountyDetailsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toBigInt(),
      result[9].toBoolean(),
      result[10].toBigInt(),
      result[11].toBigInt(),
    );
  }

  try_getBountyDetails(
    _bountyId: BigInt,
  ): ethereum.CallResult<Think2Earn__getBountyDetailsResult> {
    let result = super.tryCall(
      "getBountyDetails",
      "getBountyDetails(uint256):(string,string,string,uint256,uint256,uint256,uint256,address,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_bountyId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Think2Earn__getBountyDetailsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toBigInt(),
        value[9].toBoolean(),
        value[10].toBigInt(),
        value[11].toBigInt(),
      ),
    );
  }

  getBountySubmissions(
    _bountyId: BigInt,
    _submissionId: BigInt,
  ): Think2Earn__getBountySubmissionsResultValue0Struct {
    let result = super.call(
      "getBountySubmissions",
      "getBountySubmissions(uint256,uint256):((address,bytes))",
      [
        ethereum.Value.fromUnsignedBigInt(_bountyId),
        ethereum.Value.fromUnsignedBigInt(_submissionId),
      ],
    );

    return changetype<Think2Earn__getBountySubmissionsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getBountySubmissions(
    _bountyId: BigInt,
    _submissionId: BigInt,
  ): ethereum.CallResult<Think2Earn__getBountySubmissionsResultValue0Struct> {
    let result = super.tryCall(
      "getBountySubmissions",
      "getBountySubmissions(uint256,uint256):((address,bytes))",
      [
        ethereum.Value.fromUnsignedBigInt(_bountyId),
        ethereum.Value.fromUnsignedBigInt(_submissionId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Think2Earn__getBountySubmissionsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getVersion(): BigInt {
    let result = super.call("getVersion", "getVersion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVersion", "getVersion():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  submitEEGData(_bountyId: BigInt, _eegDataHash: Bytes): BigInt {
    let result = super.call(
      "submitEEGData",
      "submitEEGData(uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_bountyId),
        ethereum.Value.fromBytes(_eegDataHash),
      ],
    );

    return result[0].toBigInt();
  }

  try_submitEEGData(
    _bountyId: BigInt,
    _eegDataHash: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitEEGData",
      "submitEEGData(uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_bountyId),
        ethereum.Value.fromBytes(_eegDataHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CompleteBountyCall extends ethereum.Call {
  get inputs(): CompleteBountyCall__Inputs {
    return new CompleteBountyCall__Inputs(this);
  }

  get outputs(): CompleteBountyCall__Outputs {
    return new CompleteBountyCall__Outputs(this);
  }
}

export class CompleteBountyCall__Inputs {
  _call: CompleteBountyCall;

  constructor(call: CompleteBountyCall) {
    this._call = call;
  }

  get _bountyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get acceptedSubmissions(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class CompleteBountyCall__Outputs {
  _call: CompleteBountyCall;

  constructor(call: CompleteBountyCall) {
    this._call = call;
  }
}

export class CreateBountyCall extends ethereum.Call {
  get inputs(): CreateBountyCall__Inputs {
    return new CreateBountyCall__Inputs(this);
  }

  get outputs(): CreateBountyCall__Outputs {
    return new CreateBountyCall__Outputs(this);
  }
}

export class CreateBountyCall__Inputs {
  _call: CreateBountyCall;

  constructor(call: CreateBountyCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _mediaURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _judgeTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxProgress(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateBountyCall__Outputs {
  _call: CreateBountyCall;

  constructor(call: CreateBountyCall) {
    this._call = call;
  }
}

export class SubmitEEGDataCall extends ethereum.Call {
  get inputs(): SubmitEEGDataCall__Inputs {
    return new SubmitEEGDataCall__Inputs(this);
  }

  get outputs(): SubmitEEGDataCall__Outputs {
    return new SubmitEEGDataCall__Outputs(this);
  }
}

export class SubmitEEGDataCall__Inputs {
  _call: SubmitEEGDataCall;

  constructor(call: SubmitEEGDataCall) {
    this._call = call;
  }

  get _bountyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _eegDataHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitEEGDataCall__Outputs {
  _call: SubmitEEGDataCall;

  constructor(call: SubmitEEGDataCall) {
    this._call = call;
  }

  get submissionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
